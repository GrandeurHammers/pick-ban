import "../main.ostw";

rule: "Create additional on-screen elements"
{
    # Center elements
    CreateProgressBarInWorldText(
        VisibleTo:          visibleIf(selectTimeRemaining > 0),
        Value:              selectTimeRemaining / timePerPhase * 100,
        Text:               <"<0> <1>", currVotingTeam, PhaseName>,
        Position:           OnScreenText.WorldRender(camPos, camFacing, 0, 1.3),
        Scale:              1.5,
        Clipping:           Clipping.DoNotClip,
        Reevaluation:       ProgressBarEvaluation.VisibleToAndValues,
        NonteamSpectators:  Spectators.VisibleNever       
    );
    CreateInWorldText(
        VisibleTo:          visibleIf(selectTimeRemaining > 0),
        Header:             RoundToInteger(selectTimeRemaining, Rounding.Up),
        Position:           OnScreenText.WorldRender(camPos, camFacing, 0, 1),
        Scale:              4,
        Clipping:           Clipping.DoNotClip,
        Reevaluation:       InworldTextRev.VisibleToAndString,
        Spectators:         Spectators.VisibleNever
    );
    ModifyVariable(globalIWText, Operation.AppendToArray, LastTextID());
    # Left-side elements
    CreateInWorldText(
        VisibleTo:          AllPlayers(),
        Header:             @"Protected Heroes",
        Position:           OnScreenText.WorldRender(camPos, camFacing, -2.5, 1.5),
        Scale:              3,
        Clipping:           Clipping.DoNotClip,
        Reevaluation:       InworldTextRev.VisibleTo,
        Spectators:         Spectators.VisibleNever
    );
    ModifyVariable(globalIWText, Operation.AppendToArray, LastTextID());
    for (i = 0; numProtects / 2; 1) {
        CreateInWorldText(
            VisibleTo:      visibleIf(LocalPlayer().isInMenu),
            Header:         <"<0>  <1>  <2>  <3>",
                protectHeroString(EvaluateOnce(4 * i + 0)),
                protectHeroString(EvaluateOnce(4 * i + 1)),
                protectHeroString(EvaluateOnce(4 * i + 2)),
                protectHeroString(EvaluateOnce(4 * i + 3))>,
            Position:       screenPos(-2.5, 1.25 - 0.3 * i),
            Scale:          3,
            Clipping:       Clipping.DoNotClip,
            Reevaluation:   InworldTextRev.VisibleToAndString,
            Spectators:     Spectators.VisibleNever
        );
        ModifyVariable(globalIWText, Operation.AppendToArray, LastTextID());
    }
    # Right-side elements
    CreateInWorldText(
        VisibleTo:          AllPlayers(),
        Header:             @"Banned Heroes",
        Position:           OnScreenText.WorldRender(camPos, camFacing, 2.5, 1.5),
        Scale:              3,
        Clipping:           Clipping.DoNotClip,
        Reevaluation:       InworldTextRev.VisibleTo,
        Spectators:         Spectators.VisibleNever
    );
    ModifyVariable(globalIWText, Operation.AppendToArray, LastTextID());
    for (i = 0; numBans / 2; 1) {
        CreateInWorldText(
            VisibleTo:      visibleIf(LocalPlayer().isInMenu),
            Header:         <"<0>  <1>  <2>  <3>",
                banHeroString(EvaluateOnce(4 * i + 0)),
                banHeroString(EvaluateOnce(4 * i + 1)),
                banHeroString(EvaluateOnce(4 * i + 2)),
                banHeroString(EvaluateOnce(4 * i + 3))>,
            Position:       screenPos(2.5, 1.25 - 0.3 * i),
            Scale:          3,
            Clipping:       Clipping.DoNotClip,
            Reevaluation:   InworldTextRev.VisibleToAndString,
            Spectators:     Spectators.VisibleNever
        );
        ModifyVariable(globalIWText, Operation.AppendToArray, LastTextID());
    }
}

String protectHeroString(Number n):
    Math.IsInRange(n, 0, numProtects * 2 - 1) ? (n < CountOf(protectedHeroes)) ?
        HeroIconString(protectedHeroes[n]) : IconString(Icon.QuestionMark) + " " : "       ";

String banHeroString(Number n):
    Math.IsInRange(n, 0, numBans * 2 - 1) ? (n < CountOf(bannedHeroes)) ?
        HeroIconString(bannedHeroes[n]) : IconString(Icon.QuestionMark) + " " : "       ";
